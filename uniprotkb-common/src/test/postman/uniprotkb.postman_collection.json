{
	"info": {
		"_postman_id": "14e81bdc-5a60-43fb-bcbd-16fddfb7c756",
		"name": "uniprotkb",
		"description": "Test suite for UniProtKB requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/accession",
			"item": [
				{
					"name": "standard requests",
					"item": [
						{
							"name": "Get by accession (Swiss-Prot)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a65c635-cadc-4ae0-af51-ddfd5dd329bd",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, undefined, undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"utils.verifyEntryContents(pm.response.json(), pm.collectionVariables.get(\"accession_swissprot\"))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/{{accession_swissprot}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accession",
										"{{accession_swissprot}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by accession (TrEMBL)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dcac8d8c-259a-4a7d-8416-d0d4dddd77a0",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, undefined, undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"utils.verifyEntryContents(pm.response.json(), pm.collectionVariables.get(\"accession_trembl\"))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/{{accession_trembl}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accession",
										"{{accession_trembl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong accession format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "808e6869-05e7-4f55-aebd-42bce93f4f04",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"",
											"verifyHeaders(\"none\", 400, \"application/json\", undefined, ",
											"            undefined, \"none\", xRelease, controlAllow);",
											"",
											"let response = pm.response.json();",
											"pm.test(\"Error url exists\", function() {",
											"    let re = new RegExp(\".*WRONG_FORMAT.*\");",
											"    pm.expect(response.url).to.be.a('string');",
											"    pm.expect(response.url).to.match(re);",
											"});",
											"",
											"pm.test(\"There is an error message\", function() {",
											"    pm.expect(response.messages[0]).to.be.a('string');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/WRONG_FORMAT",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accession",
										"WRONG_FORMAT"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "entry formats",
					"item": [
						{
							"name": "json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c56e6769-7686-4141-8930-b6e4db1a7ed4",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, \"application/json\", undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"utils.verifyEntryContents(pm.response.json(), pm.collectionVariables.get(\"accession_trembl\"))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/{{accession_trembl}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accession",
										"{{accession_trembl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "271f8d79-23cd-4dd2-bd3f-85c291507bca",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, \"application/xml\", undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"let response = xml2Json(pm.response.text());",
											"pm.test(\"Accession exists\", function() {",
											"    pm.expect(response.uniprot.entry.accession).to.eql(pm.collectionVariables.get(\"accession_trembl\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/{{accession_trembl}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accession",
										"{{accession_trembl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fasta",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddf39974-bf71-4a56-9b5c-fed381acf939",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, \"text/fasta\", undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"let response = pm.response.text();",
											"let parts = response.split('|');",
											"pm.test(\"Accession exists\", function() {",
											"    pm.expect(parts[1]).to.eql(pm.collectionVariables.get(\"accession_trembl\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "text/fasta"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/{{accession_trembl}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accession",
										"{{accession_trembl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "text",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6b9631f-1366-4c51-9ca7-f1389d452c41",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, \"text/flatfile\", undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"let response = pm.response.text();",
											"let parts = response.split('\\n');",
											"pm.test(\"Accession exists\", function() {",
											"    pm.expect(parts[1]).to.eql(\"AC   \" + pm.collectionVariables.get(\"accession_trembl\") + \";\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "text/flatfile"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/{{accession_trembl}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accession",
										"{{accession_trembl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "tsv",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec130d89-ec13-4447-930a-b11adfaf08ca",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, \"text/tsv\", undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"let response = pm.response.text();",
											"let lines = response.split('\\n');",
											"let lineParts = lines[1].split('\\t');",
											"pm.test(\"Accession exists\", function() {",
											"    pm.expect(lineParts[0]).to.eql(pm.collectionVariables.get(\"accession_trembl\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "text/tsv"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/{{accession_trembl}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accession",
										"{{accession_trembl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84b60f06-fe92-46ca-854a-564caa58b4ed",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, \"text/list\", undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"let response = pm.response.text();",
											"pm.test(\"Accession exists\", function() {",
											"    pm.expect(response).to.eql(pm.collectionVariables.get(\"accession_trembl\")+\"\\n\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "text/list"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/{{accession_trembl}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accession",
										"{{accession_trembl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "gff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed45d26e-014a-44f1-b612-ce3dc000df1b",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, \"text/gff\", undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"let response = pm.response.text();",
											"let parts = response.split('\\n')[1].split(' ');",
											"pm.test(\"Accession exists\", function() {",
											"    pm.expect(parts[1]).to.eql(pm.collectionVariables.get(\"accession_trembl\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "text/gff"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/{{accession_trembl}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accession",
										"{{accession_trembl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "xls",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "adee6afb-89ca-42b0-a5e5-7a0232be48f7",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetl\", undefined, ",
											"            undefined, undefined, xRelease, controlAllow);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/{{accession_trembl}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accession",
										"{{accession_trembl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "wrong format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33a0b7d4-d9aa-4231-92b4-617acfb761d7",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(\"none\", 400, \"application/json\", undefined, ",
											"            undefined, \"none\", xRelease, controlAllow);",
											"",
											"let response = pm.response.json();",
											"",
											"pm.test(\"Error url exists\", function() {",
											"    pm.expect(response.url).to.be.a('string');",
											"});",
											"",
											"pm.test(\"Wrong content type is in error message\", function() {",
											"    let re = new RegExp(\".*\"+pm.request.headers.get(\"Accept\")+\".*\");",
											"    pm.expect(response.messages[0]).to.match(re);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "unknown/content-type"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/{{accession_trembl}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accession",
										"{{accession_trembl}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Test suite for /{accession} API.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "64284015-a05c-44f0-909c-f627f59b2610",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9ac4d1bf-6130-4adf-bce5-cb3c4cb4914e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "/accessions",
			"item": [
				{
					"name": "standard requests",
					"item": [
						{
							"name": "Get by accession list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3837b392-2db7-4311-bd23-f625433b8416",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, undefined, undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"let jsonData = pm.response.json();",
											"",
											"let accessionList = pm.collectionVariables.get(\"accession_list\");",
											"let accessions = accessionList.split(\",\");",
											"",
											"pm.test(\"Check results contains correct number\", function () {",
											"    pm.expect(jsonData.results.length).to.eql(accessions.length);",
											"});",
											"",
											"for(let i = 0; i < accessions.length ; i++) {",
											"    utils.verifyEntryContents(jsonData.results[i], accessions[i]);    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/accessions?accessions={{accession_list}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accessions"
									],
									"query": [
										{
											"key": "accessions",
											"value": "{{accession_list}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "entry formats",
					"item": [
						{
							"name": "json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f2fd2a9-2026-426a-a468-15b5eb17b0bf",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, \"application/json\", undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"let accessionList = pm.collectionVariables.get(\"accession_list\");",
											"let accessions = accessionList.split(\",\");",
											"",
											"let response = pm.response.json();",
											"for(let i = 0; i < accessions.length; i++) {",
											"    pm.test(\"Accession exists in response: \"+accessions[i], function() {",
											"        let entryAccession = response.results[i].primaryAccession;",
											"",
											"        pm.expect(entryAccession).to.eql(accessions[i]);",
											"    });",
											"}",
											"",
											"pm.test(\"Check results contains correct number\", function () {",
											"    pm.expect(response.results.length).to.eql(accessions.length);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/accessions?accessions={{accession_list}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accessions"
									],
									"query": [
										{
											"key": "accessions",
											"value": "{{accession_list}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d9888fd-d0bd-4ce3-b2f4-5c860616cde9",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, \"application/xml\", undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"let response = xml2Json(pm.response.text());",
											"",
											"let accessionList = pm.collectionVariables.get(\"accession_list\");",
											"let accessions = accessionList.split(\",\");",
											"",
											"let xmlAccessions = 0;",
											"for(let i = 0; i < accessions.length; i++) {",
											"    pm.test(\"Accession exists in response: \"+accessions[i], function() {",
											"        let entryAccession = response.uniprot.entry[i].accession;",
											"        if(Array.isArray(response.uniprot.entry[i].accession)) {",
											"            entryAccession = response.uniprot.entry[i].accession[0];",
											"        }",
											"",
											"        pm.expect(entryAccession).to.eql(accessions[i]);",
											"        if(entryAccession == accessions[i]) {",
											"            xmlAccessions++;",
											"        }",
											"    });",
											"}",
											"",
											"pm.test(\"Check results contains correct number\", function () {",
											"    pm.expect(xmlAccessions).to.eql(accessions.length);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/accessions?accessions={{accession_list}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accessions"
									],
									"query": [
										{
											"key": "accessions",
											"value": "{{accession_list}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "fasta",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b1fc95d-4c32-45d8-9627-225ac8147f1f",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, \"text/fasta\", undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"let accessionList = pm.collectionVariables.get(\"accession_list\");",
											"let accessions = accessionList.split(\",\");",
											"",
											"let response = pm.response.text();",
											"let lines = response.split('>');",
											"",
											"let actualAccessions = 0;",
											"for(let i = 0; i < accessions.length; i++) {",
											"    pm.test(\"Accession exists in response: \"+accessions[i], function() {",
											"        let parts = lines[i+1].split('|');",
											"        let entryAccession = parts[1];",
											"",
											"        pm.expect(entryAccession).to.eql(accessions[i]);",
											"        if(entryAccession == accessions[i]) {",
											"            actualAccessions++;",
											"        }",
											"    });",
											"}",
											"",
											"pm.test(\"Check results contains correct number\", function () {",
											"    pm.expect(actualAccessions).to.eql(accessions.length);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "text/fasta"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/accessions?accessions={{accession_list}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accessions"
									],
									"query": [
										{
											"key": "accessions",
											"value": "{{accession_list}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "text",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4721f46a-6b9f-45df-9d5b-482ed235e36a",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, \"text/flatfile\", undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"let accessionList = pm.collectionVariables.get(\"accession_list\");",
											"let accessions = accessionList.split(\",\");",
											"",
											"let response = pm.response.text();",
											"let lines = response.split('AC   ');",
											"",
											"let actualAccessions = 0;",
											"for(let i = 0; i < accessions.length; i++) {",
											"    pm.test(\"Accession exists in response: \"+accessions[i], function() {",
											"        let entryAccession = lines[i+1];",
											"",
											"        let re = new RegExp(accessions[i]+\"; .*\");",
											"        pm.expect(entryAccession).to.match(re);",
											"        if(entryAccession.match(re)) {",
											"            actualAccessions++;",
											"        }",
											"    });",
											"}",
											"",
											"pm.test(\"Check results contains correct number\", function () {",
											"    pm.expect(actualAccessions).to.eql(accessions.length);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "text/flatfile"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/accessions?accessions={{accession_list}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accessions"
									],
									"query": [
										{
											"key": "accessions",
											"value": "{{accession_list}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "tsv",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bbd0e0bd-9c7a-471f-b6f3-80c6e98435d8",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, \"text/tsv\", undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"let accessionList = pm.collectionVariables.get(\"accession_list\");",
											"let accessions = accessionList.split(\",\");",
											"",
											"let response = pm.response.text();",
											"let lines = response.split('\\n');",
											"",
											"let actualAccessions = 0;",
											"for(let i = 0; i < accessions.length; i++) {",
											"    pm.test(\"Accession exists in response: \"+accessions[i], function() {",
											"        let entryAccession = lines[i+1].split('\\t')[0];",
											"",
											"        pm.expect(entryAccession).to.eql(accessions[i]);",
											"        if(entryAccession == accessions[i]) {",
											"            actualAccessions++;",
											"        }",
											"    });",
											"}",
											"",
											"pm.test(\"Check results contains correct number\", function () {",
											"    pm.expect(actualAccessions).to.eql(accessions.length);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "text/tsv"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/accessions?accessions={{accession_list}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accessions"
									],
									"query": [
										{
											"key": "accessions",
											"value": "{{accession_list}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ef4060c-014b-4c92-a757-4ac976bc96f9",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, \"text/list\", undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"let accessionList = pm.collectionVariables.get(\"accession_list\");",
											"let accessions = accessionList.split(\",\");",
											"",
											"let response = pm.response.text();",
											"let lines = response.split('\\n');",
											"",
											"let actualAccessions = 0;",
											"for(let i = 0; i < accessions.length; i++) {",
											"    pm.test(\"Accession exists in response: \"+accessions[i], function() {",
											"        let entryAccession = lines[i];",
											"",
											"        pm.expect(entryAccession).to.eql(accessions[i]);",
											"        if(entryAccession == accessions[i]) {",
											"            actualAccessions++;",
											"        }",
											"    });",
											"}",
											"",
											"pm.test(\"Check results contains correct number\", function () {",
											"    pm.expect(actualAccessions).to.eql(accessions.length);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "text/list"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/accessions?accessions={{accession_list}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accessions"
									],
									"query": [
										{
											"key": "accessions",
											"value": "{{accession_list}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "gff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2381b66d-a1e7-4608-82db-10ee9d790c73",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, \"text/gff\", undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"let accessionList = pm.collectionVariables.get(\"accession_list\");",
											"let accessions = accessionList.split(\",\");",
											"",
											"let response = pm.response.text();",
											"let lines = response.split('sequence-region ');",
											"",
											"let actualAccessions = 0;",
											"for(let i = 0; i < accessions.length; i++) {",
											"    pm.test(\"Accession exists in response: \"+accessions[i], function() {",
											"        let entryAccession = lines[i+1].match(/[A-Z0-9]+/)[0];",
											"",
											"        pm.expect(entryAccession).to.eql(accessions[i]);",
											"        if(entryAccession == accessions[i]) {",
											"            actualAccessions++;",
											"        }",
											"    });",
											"}",
											"",
											"pm.test(\"Check results contains correct number\", function () {",
											"    pm.expect(actualAccessions).to.eql(accessions.length);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "text/gff"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/accessions?accessions={{accession_list}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accessions"
									],
									"query": [
										{
											"key": "accessions",
											"value": "{{accession_list}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "xls",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da3f28e7-a14a-477d-ac10-948124d1c875",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", undefined, ",
											"            undefined, undefined, xRelease, controlAllow);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/accessions?accessions={{accession_list}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accessions"
									],
									"query": [
										{
											"key": "accessions",
											"value": "{{accession_list}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrong format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4014a17e-e66b-4946-85c3-45bc32d44864",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(\"none\", 400, \"application/json\", undefined, ",
											"            undefined, \"none\", xRelease, controlAllow);",
											"",
											"let response = pm.response.json();",
											"",
											"pm.test(\"Error url exists\", function() {",
											"    pm.expect(response.url).to.be.a('string');",
											"});",
											"",
											"pm.test(\"Wrong content type is in error message\", function() {",
											"    let re = new RegExp(\".*\"+pm.request.headers.get(\"Accept\")+\".*\");",
											"    pm.expect(response.messages[0]).to.match(re);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "unknown/content-type"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/accessions?accessions={{accession_list}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"accessions"
									],
									"query": [
										{
											"key": "accessions",
											"value": "{{accession_list}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "/search",
			"item": [
				{
					"name": "search by field",
					"item": [
						{
							"name": "accession:P21802",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af3b08a6-fc9d-4b40-93ed-97a4dc39932c",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, \"application/json\", undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"// verify data",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Check results contains one object only\", function () {",
											"    pm.expect(jsonData.results.length).to.eql(1);",
											"});",
											"",
											"let entry = jsonData.results[0];",
											"",
											"utils.verifyEntryContents(entry, \"P21802\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query=accession:P21802",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "accession:P21802"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "reviewed:true",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f5e1bfc-8e32-41f6-847c-e82a7e2254c7",
										"exec": [
											"let responseOkay = eval(pm.globals.get('responseOkay'));",
											"responseOkay();",
											"",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Check results contains more than 1\", function () {",
											"    pm.expect(jsonData.results.length).to.be.above(0);",
											"});",
											"",
											"for(let entryIndex = 0; entryIndex < jsonData.results.length; entryIndex++) {",
											"    let entry = jsonData.results[entryIndex];",
											"    let hasAttr = utils.isReviewed(entry);",
											"    ",
											"    pm.test(\"Check result entry is reviewed: \"+ hasAttr, function () {",
											"        pm.expect(hasAttr).is.to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query=reviewed:true",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "reviewed:true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "keyword:kinase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "625052c4-770d-42b0-86b7-e1a70b5f021d",
										"exec": [
											"let responseOkay = eval(pm.globals.get('responseOkay'));",
											"responseOkay();",
											"",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Check results contains more than 1\", function () {",
											"    pm.expect(jsonData.results.length).to.be.above(0);",
											"});",
											"",
											"for(let entryIndex = 0; entryIndex < jsonData.results.length; entryIndex++) {",
											"    let entry = jsonData.results[entryIndex];",
											"    let hasKinase = false;",
											"        ",
											"    for(let keywordIndex = 0; keywordIndex < entry.keywords.length; keywordIndex++) {",
											"        if(entry.keywords[keywordIndex].name == \"Kinase\") {",
											"            hasKinase = true;",
											"        }",
											"    }",
											"    ",
											"    pm.test(\"Check result entry contains kinase: \"+ hasKinase, function () {",
											"        pm.expect(hasKinase).is.to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3b68aacf-b0d5-4dca-a7ab-9dda126b0625",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query=keyword:kinase",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "keyword:kinase"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "gene:cdc7",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92512652-50d5-4511-80e3-ea00eb898ed2",
										"exec": [
											"let responseOkay = eval(pm.globals.get('responseOkay'));",
											"responseOkay();",
											"",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Check results contains more than 1\", function () {",
											"    pm.expect(jsonData.results.length).to.be.above(0);",
											"});",
											"",
											"for(let entryIndex = 0; entryIndex < jsonData.results.length; entryIndex++) {",
											"    let entry = jsonData.results[entryIndex];",
											"",
											"    let hasAttr = false;",
											"        ",
											"    for(let attrIndex = 0; attrIndex < entry.genes.length; attrIndex++) {",
											"        if(entry.genes[attrIndex].geneName.value.match(/^[Cc][Dd][Cc]7.*/)) {",
											"            hasAttr = true;",
											"        }",
											"    }",
											"    ",
											"    pm.test(\"Check result entry contains gene cdc7: \"+ hasAttr, function () {",
											"        pm.expect(hasAttr).is.to.be.true;",
											"    });",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query=gene:cdc7",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "gene:cdc7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "taxonomy_id:9606",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16c51c39-6f07-431a-a3b3-73b6734fd5e9",
										"exec": [
											"let responseOkay = eval(pm.globals.get('responseOkay'));",
											"responseOkay();",
											"",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Check results contains more than 1\", function () {",
											"    pm.expect(jsonData.results.length).to.be.above(0);",
											"});",
											"",
											"for(let entryIndex = 0; entryIndex < jsonData.results.length; entryIndex++) {",
											"    let entry = jsonData.results[entryIndex];",
											"",
											"    let hasAttr = entry.organism.taxonId == 9606;",
											"        ",
											"    pm.test(\"Check result entry contains taxonomy id 9606: \"+ hasAttr, function () {",
											"        pm.expect(hasAttr).is.to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query=taxonomy_id:9606",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "taxonomy_id:9606"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "active:true",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b84a3ed-b272-472e-a6c5-3a195a69a3c4",
										"exec": [
											"let responseOkay = eval(pm.globals.get('responseOkay'));",
											"responseOkay();",
											"",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Check results contains more than 1\", function () {",
											"    pm.expect(jsonData.results.length).to.be.above(0);",
											"});",
											"",
											"for(let entryIndex = 0; entryIndex < jsonData.results.length; entryIndex++) {",
											"    let entry = jsonData.results[entryIndex];",
											"    let hasAttr = entry.entryType.match(/^UniProtKB .*/).length > 0;",
											"    ",
											"    pm.test(\"Check result entry is active: \"+ hasAttr, function () {",
											"        pm.expect(hasAttr).is.to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query=active:true",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "active:true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "active:false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8a1b22e-7e11-48b7-ac01-66303b9169ad",
										"exec": [
											"let responseOkay = eval(pm.globals.get('responseOkay'));",
											"responseOkay();",
											"",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Check results contains more than 1\", function () {",
											"    pm.expect(jsonData.results.length).to.be.above(0);",
											"});",
											"",
											"for(let entryIndex = 0; entryIndex < jsonData.results.length; entryIndex++) {",
											"    let entry = jsonData.results[entryIndex];",
											"    let hasAttr = entry.entryType.match(/^Inactive$/).length > 0;",
											"    ",
											"    pm.test(\"Check result entry is inactive: \"+ hasAttr, function () {",
											"        pm.expect(hasAttr).is.to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query=active:false",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "active:false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "cc_disease:\"breast cancer\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "022b996a-a8c6-4930-b4a9-af7e0a8a5692",
										"exec": [
											"let responseOkay = eval(pm.globals.get('responseOkay'));",
											"responseOkay();",
											"",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Check results contains more than 1\", function () {",
											"    pm.expect(jsonData.results.length).to.be.above(0);",
											"});",
											"",
											"for(let entryIndex = 0; entryIndex < jsonData.results.length; entryIndex++) {",
											"    let entry = jsonData.results[entryIndex];",
											"",
											"    let hasCorrectDisease = false;",
											"    for(let i = 0; i < entry.comments.length; i++) {",
											"        if(entry.comments[i].commentType == \"DISEASE\") {            ",
											"            if(utils.isRealValue(entry.comments[i].disease)",
											"                && utils.isRealValue(entry.comments[i].disease.diseaseId) ",
											"                && entry.comments[i].disease.diseaseId.match(/.*aceruloplasminemia.*/i)",
											"                ) {",
											"                hasCorrectDisease = true;",
											"            }",
											"        }",
											"    }",
											"",
											"    pm.test(\"Check result entry has disease: \"+ hasCorrectDisease, function () {",
											"        pm.expect(hasCorrectDisease).is.to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query=cc_disease:aceruloplasminemia",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "cc_disease:aceruloplasminemia"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "complex search",
					"item": [
						{
							"name": "search with complex request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9731d81-af01-4b56-9d11-938e2b07a597",
										"exec": [
											"let responseOkay = eval(pm.globals.get('responseOkay'));",
											"responseOkay();",
											"",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Check results contains more than 1\", function () {",
											"    pm.expect(jsonData.results.length).to.be.above(0);",
											"});",
											"",
											"for(let entryIndex = 0; entryIndex < jsonData.results.length; entryIndex++) {",
											"    let entry = jsonData.results[entryIndex];",
											"",
											"    utils.logEntryChecked(entry);",
											"    utils.verifyEntryContents(entry);",
											"",
											"    let isReviewed = utils.isReviewed(entry);",
											"    pm.test(\"Check result entry is reviewed: \"+ isReviewed, function () {",
											"        pm.expect(isReviewed).is.to.be.true;",
											"    });",
											"",
											"    let hasKinase = false;",
											"    let hasCellMembrane = false;",
											"    for(let keywordIndex = 0; keywordIndex < entry.keywords.length; keywordIndex++) {",
											"        if(entry.keywords[keywordIndex].name == \"Kinase\") {",
											"            hasKinase = true;",
											"        }",
											"     ",
											"        if(utils.isRealValue(entry.keywords[keywordIndex].name.match(/Acetyleation/))) {",
											"            hasCellMembrane = true;",
											"        }",
											"    }",
											"",
											"    let hasCorrectGene = false;",
											"    for(let attrIndex = 0; attrIndex < entry.genes.length; attrIndex++) {",
											"        if(entry.genes[attrIndex].geneName.value.match(/^[Tt][Tt][Kk].*/)) {",
											"            hasCorrectGene = true;",
											"        }",
											"        // check synonyms",
											"        if(utils.isRealValue(entry.genes[attrIndex].synonyms)) {",
											"            for(let i = 0; i < entry.genes[attrIndex].synonyms.length; i++) {",
											"                if(entry.genes[attrIndex].synonyms[i].value.match(/^[Tt][Tt][Kk].*/)) {",
											"                    hasCorrectGene = true;",
											"                }",
											"            }",
											"        }",
											"",
											"        // check orfnames",
											"        if(utils.isRealValue(entry.genes[attrIndex].orfNames)) {",
											"            for(let i = 0; i < entry.genes[attrIndex].orfNames.length; i++) {",
											"                if(entry.genes[attrIndex].orfNames[i].value.match(/^[Tt][Tt][Kk].*/)) {",
											"                    hasCorrectGene = true;",
											"                }",
											"            }    ",
											"        }",
											"",
											"        // check orderedlocusnames",
											"        if(utils.isRealValue(entry.genes[attrIndex].orderedLocusNames)) {",
											"            for(let i = 0; i < entry.genes[attrIndex].orderedLocusNames.length; i++) {",
											"                if(entry.genes[attrIndex].orderedLocusNames[i].value.match(/^[Tt][Tt][Kk].*/)) {",
											"                    hasCorrectGene = true;",
											"                }",
											"            }    ",
											"        }",
											"    }",
											"",
											"    pm.test(\"Check result entry has kinase: \"+ hasKinase, function () {",
											"        pm.expect(hasKinase).is.to.be.true;",
											"    });",
											"",
											"    pm.test(\"Check result entry does not have cell membrane: \"+ hasCellMembrane, function () {",
											"        pm.expect(hasCellMembrane).is.to.be.false;",
											"    });",
											"",
											"    pm.test(\"Check result entry does not gene TTK: \"+ hasCorrectGene, function () {",
											"        pm.expect(hasCorrectGene).is.to.be.true;",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query=active:true AND reviewed:true AND (keyword:kinase -keyword:\"Acetylation\") AND gene:TTK",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "active:true AND reviewed:true AND (keyword:kinase -keyword:\"Acetylation\") AND gene:TTK"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "matched fields",
					"item": [
						{
							"name": "matched fields object exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2321a074-42b1-4bb6-87a3-7f19dc65a073",
										"exec": [
											"let xRelease = pm.globals.get('x_releaseNumber');",
											"let controlAllow = pm.globals.get('control_origin');",
											"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
											"verifyHeaders(undefined, 200, \"application/json\", undefined, ",
											"            undefined, undefined, xRelease, controlAllow);",
											"",
											"// verify data",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Check that there is more than one matched field\", function () {",
											"    pm.expect(jsonData.matchedFields.length).to.be.greaterThan(0);",
											"});",
											"",
											"pm.test(\"Check results contains more than one result\", function () {",
											"    pm.expect(jsonData.results.length).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query=cdc7&showSingleTermMatchedFields=true",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{path_context}}",
										"{{uniprotkb_path}}",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "cdc7"
										},
										{
											"key": "showSingleTermMatchedFields",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Test suite for /search API.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5a22f003-2005-4225-8dc0-4685348f47b0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "87ad547f-a4c3-4f8e-92d9-8225f044fb3e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "/stream",
			"item": [
				{
					"name": "gene:cdc7",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b13c64-bea5-412b-ac1a-b1bfe698d3fd",
								"exec": [
									"let xRelease = pm.globals.get('x_releaseNumber');",
									"let controlAllow = pm.globals.get('control_origin');",
									"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
									"verifyHeaders(undefined, 200, \"application/json\", undefined, ",
									"            undefined, undefined, xRelease, controlAllow);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/stream?query=gene:cdc7",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{path_context}}",
								"{{uniprotkb_path}}",
								"stream"
							],
							"query": [
								{
									"key": "query",
									"value": "gene:cdc7"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Test suite for /stream API.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "43c8c15f-a0e6-45b5-b414-76772df5cb3c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b0e09302-6067-4528-b706-68de9c9fed95",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ad4794a8-cc2a-4959-88db-f97f9e12db16",
				"type": "text/javascript",
				"exec": [
					"utils = {",
					"  verifyEntryAudit: function(entryAudit) {",
					"    pm.test(\"entryAudit\", function () {",
					"      utils.verifyNotNull(\"entryAudit\", entryAudit);",
					"      pm.expect(entryAudit, 'is not an object').to.be.an(\"object\");",
					"      pm.expect(entryAudit.firstPublicDate).to.match(/[0-9]{4}-[0-9]{2}-[0-9]{2}/);",
					"      pm.expect(entryAudit.lastAnnotationUpdateDate).to.match(/[0-9]{4}-[0-9]{2}-[0-9]{2}/);",
					"      pm.expect(entryAudit.lastSequenceUpdateDate).to.match(/[0-9]{4}-[0-9]{2}-[0-9]{2}/);",
					"      pm.expect(entryAudit.entryVersion, \"entryVersion\").to.be.a('number');",
					"      pm.expect(entryAudit.sequenceVersion, \"sequenceVersion\").to.be.a('number');",
					"  })},",
					"",
					"verifySecondaryAccessions: function(secondaryAccessions) {",
					"    if (secondaryAccessions != null) {",
					"        pm.test(\"secondaryAccessions\", function () {",
					"            for(i = 0; i < secondaryAccessions.length; i++) {",
					"                pm.expect(secondaryAccessions[i]).to.match(/([OPQ][0-9][A-Z0-9]{3}[0-9]|[A-NR-Z]([0-9][A-Z][A-Z0-9]{2}){1,2}[0-9])(-[0-9]+)?/);",
					"            }",
					"})}},",
					"",
					"verifyOrganism: function(organism) {",
					"    pm.test(\"organism\", function () {",
					"      utils.verifyObject(\"organism\", organism);",
					"      pm.expect(organism.scientificName, \"scientificName\").is.a('string');",
					"      pm.expect(organism.taxonId, \"taxonId\").is.a('number');  ",
					"      utils.verifyArray(\"lineage\", organism.lineage);",
					"})},",
					"",
					"verifyProteinName: function(fieldName, proteinName, fullName, shortNames, ecNumbers){",
					"    pm.test(fieldName, function () {",
					"        utils.verifyNotNull(fieldName, proteinName);",
					"        pm.expect(proteinName, 'is not an object').to.be.an(\"object\");",
					"        utils.verifyNotNull(\"fieldName\", proteinName.fullName);",
					"        pm.expect(proteinName.fullName, \"fullName\").to.eql(fullName);",
					"        utils.verifyArrayValues(\"shortNames\", proteinName.shortNames, shortNames);",
					"        utils.verifyArrayValues(\"ecNumbers\", proteinName.ecNumbers, ecNumbers);",
					"    })",
					"},",
					"",
					"// verify results array common things",
					"verifyResults: function(results, expectedPrimaryAccessions){",
					"  pm.test(\"results\", function () {",
					"  utils.verifyArray(\"results\", results);",
					"  // verify primary accession",
					"  let primaryAccessions = results.map(result => result.primaryAccession);",
					"  utils.verifyArrayValues(\"results[*].primaryAccession\", primaryAccessions, expectedPrimaryAccessions);",
					"  // verify entry types",
					"  let entryTypes = results.map(result => result.entryType);",
					"  utils.verifyEntryTypes(\"results[*].entryType\", entryTypes)",
					"  })",
					"},",
					"",
					"verifyEntryTypes: function(name, entryTypes){",
					"  utils.verifyArrayValues(name, entryTypes, ['UniProtKB reviewed (Swiss-Prot)', 'UniProtKB unreviewed (TrEMBL)']);",
					"},",
					"",
					"isRealValue: function (obj){",
					" //return obj !== 'null' && obj !== 'undefined';",
					" for(var prop in obj) {",
					"    if(obj.hasOwnProperty(prop)) {",
					"      return true;",
					"    }",
					"  }",
					"",
					"  return false;",
					"//   return obj !== 'null' && obj !== 'undefined';",
					"},",
					"",
					"verifyObject: function(name, value){",
					"  utils.verifyNotNull(name, value);",
					"  pm.expect(value, name + ' is not an object').to.be.an('object');",
					"},",
					"",
					"verifyArrayValues: function(name, actualValues, expectedValues){",
					"  utils.verifyArray(name, actualValues);",
					"  pm.expect(actualValues, name + ' length mismatch').to.have.lengthOf(expectedValues.length);",
					"  pm.expect(actualValues, name + ' values mismatch').to.have.deep.members(expectedValues);",
					"},",
					"",
					"verifyArray: function(name, values){",
					"  utils.verifyNotNull(name, values);",
					"  pm.expect(values, name + ' is not an array').to.be.an('array');",
					"},",
					"",
					"verifyNotNull: function(name, value){",
					"  pm.expect(value, name + ' is undefined').not.to.be.a('undefined');",
					"  pm.expect(value, name + ' is null').not.to.be.a('null');",
					"},",
					"",
					"isReviewed: function(jsonData) {",
					"        let spArr = jsonData.entryType.match(/UniProtKB reviewed \\(Swiss-Prot\\)/);",
					"",
					"        // record for later whether this is a reviewed entry",
					"        if(Array.isArray(spArr) && spArr.length == 1) {",
					"            return true;",
					"        } else {",
					"            return false;",
					"        }",
					"},",
					"",
					"logEntryChecked: function(jsonData) {",
					"    console.log(\"Checking active entry: \" + jsonData.primaryAccession);",
					"},",
					"",
					"verifyEntryContents: function(jsonData, accession) {    ",
					"    // accession (only check if supplied)",
					"    if(utils.isRealValue(accession)) {",
					"        pm.test(\"primaryAccession: \" + accession, function () {",
					"            pm.expect(jsonData.primaryAccession).to.eql(accession);",
					"        });",
					"    }",
					"",
					"    // entry id",
					"    pm.test(\"uniProtkbId\", function () {",
					"        pm.expect(jsonData.uniProtkbId).to.match(/[A-Z0-9]+_[A-Z0-9]+/);",
					"    });",
					"",
					"    let reviewed = false;",
					"",
					"    // entry type",
					"    pm.test(\"entryType is valid (reviewed or unreviewed)\", function () {",
					"        let spArr = jsonData.entryType.match(/UniProtKB reviewed \\(Swiss-Prot\\)/);",
					"        let trArr = jsonData.entryType.match(/UniProtKB unreviewed \\(TrEMBL\\)/);",
					"",
					"        // record for later whether this is a reviewed entry",
					"        if(Array.isArray(spArr) && spArr.length == 1) {",
					"            reviewed = true;",
					"        }",
					"",
					"        valid = (Array.isArray(spArr) && spArr.length == 1) || (Array.isArray(trArr) && trArr.length == 1);",
					"        pm.expect(valid).is.true;",
					"    });",
					"",
					"    // secondary accession",
					"    utils.verifySecondaryAccessions(jsonData.secondaryAccessions);",
					"",
					"    // keywords: one KW must exist",
					"    pm.test(\"keyword exists\", function() {",
					"        pm.expect(jsonData.keywords[0].id).to.match(/KW-[0-9]{4}/)",
					"    });",
					"",
					"    // comments exists for reviewed entries",
					"    if(reviewed) {",
					"        pm.test(\"comment exists\", function() {",
					"            let typeExists = false;",
					"            for(i = 0; i < jsonData.comments.length; i++) {",
					"                if(jsonData.comments[i].commentType != null) {",
					"                    typeExists = true;",
					"                }",
					"            }",
					"            pm.expect(typeExists).is.true",
					"        });",
					"    }",
					"",
					"    // protein's recommended name",
					"    pm.test(\"protein description exists with recommended/submission name\", function() {",
					"        let valid = false;",
					"        if (jsonData.proteinDescription.hasOwnProperty('recommendedName') || jsonData.proteinDescription.hasOwnProperty('submissionNames')) {",
					"            valid = true;    ",
					"        }",
					"        pm.expect(valid).is.true",
					"    });",
					"",
					"    // sequence",
					"    pm.test(\"sequence exists\", function() {",
					"        pm.expect(jsonData.sequence.value).is.a('string')",
					"    });",
					"",
					"    // gene name",
					"    pm.test(\"gene name exists\", function() {",
					"        pm.expect(jsonData.genes.length).is.greaterThan(0)",
					"    });",
					"",
					"    // organism",
					"    utils.verifyOrganism(jsonData.organism);",
					"",
					"    // protein existence",
					"    pm.test(\"protein existence exists\", function () {",
					"        pm.expect(jsonData.proteinExistence).to.match(/[12345]: .*/);",
					"    });",
					"",
					"    // entryAudit",
					"    utils.verifyEntryAudit(jsonData.entryAudit);",
					"",
					"    // annotation score",
					"    pm.test(\"annotation score exists\", function () {",
					"        pm.expect(jsonData.annotationScore).is.a('number');",
					"    });",
					"}",
					"};"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "6b6094ff-1ad8-4839-8a6d-b5a1840ebe96",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "d3f7c25b-1b5b-48a3-b0a2-04f29b104da3",
			"key": "search_value",
			"value": "rnf18"
		},
		{
			"id": "0892cdb5-816f-49fc-becd-7407f5d3b6b0",
			"key": "accession_list",
			"value": "P0CI25,A6NDI0,A9Q1J6,P12345"
		},
		{
			"id": "922d1ddc-d53c-4c94-a631-522bcd9d733e",
			"key": "search_by_gene",
			"value": "gene:p53"
		},
		{
			"id": "2d2537bc-5dc2-45c4-a0c4-8f2c83ae7f72",
			"key": "accession_swissprot",
			"value": "P21802"
		},
		{
			"id": "1a8ed092-f854-4dfc-b2f8-728baaf3fba1",
			"key": "accession_trembl",
			"value": "A0A514LIK3"
		}
	],
	"protocolProfileBehavior": {}
}